# -*- coding: utf-8 -*-
"""AIHC Exp 8 explainability Social_Network_Ads.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oQBZNLiqhCFxeJZnb5E6ktSr9fgUbHik

# Data Preprocessing Tools

## Importing the libraries
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

"""## Importing the dataset"""

dataset = pd.read_csv('Social_Network_Ads.csv')
dataset.head()

column_name = 'User ID'
if column_name in dataset.columns:
    dataset = dataset.drop('User ID', axis='columns')

dataset['Gender'] = dataset['Gender'].replace(to_replace = ['Male', 'Female'], value = [0, 1])

dataset

X = dataset.iloc[:, :-1].values
y = dataset.iloc[:, -1].values

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 1)

from sklearn.tree import DecisionTreeClassifier
classifier = DecisionTreeClassifier(criterion = 'entropy', random_state = 0)
classifier.fit(X_train, y_train)

pip install numpy scikit-learn lime

from lime.lime_tabular import LimeTabularExplainer

explainer = LimeTabularExplainer(X_train, mode="classification")


data_point = X_test[15]

# Explain the prediction
explanation = explainer.explain_instance(data_point,  classifier.predict_proba, num_features=2)

# Display the explanation
explanation.show_in_notebook()

X_test, y_test

data_point = X_test[4]

# Explain the prediction for the chosen data point
explanation = explainer.explain_instance(data_point, classifier.predict_proba)

# Display the explanation
explanation.show_in_notebook()

X_test[1]

# from sklearn.naive_bayes import GaussianNB
# classifier = GaussianNB()
# classifier.fit(X_train, y_train)

data_point = X_test[15]

# Explain the prediction for the chosen data point
explanation = explainer.explain_instance(data_point, classifier.predict_proba)

# Display the explanation
explanation.show_in_notebook()

!pip install graphviz scikit-learn

from sklearn.tree import export_graphviz
import graphviz

feature_names = ['age', 'Salary',"Gender"]
class_names = ['No', 'Yes']
# Export the decision tree to a DOT file
dot_data = export_graphviz(classifier, out_file=None,
                           feature_names=feature_names,
                           class_names=class_names,
                           filled=True, rounded=True,
                           special_characters=True)

# Visualize the decision tree
graph = graphviz.Source(dot_data)
graph.render("your_dataset_decision_tree", format="png")  # Change format to "png" or "svg"
graph.view()  # Open the visualization in your default viewer

