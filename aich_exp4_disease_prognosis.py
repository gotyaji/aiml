# -*- coding: utf-8 -*-
"""AICH Exp4 Disease_Prognosis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16mFY2gwu6mH5OKHlm-iBqrmkM2QcSBNe

Experiment No. 4: AI model for diesease prognosis

Name: Dhanashree Raut

Department: Comps

# import libraries
"""

# Commented out IPython magic to ensure Python compatibility.

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix,accuracy_score
# %matplotlib inline

"""Exploratory Data Analysis"""

df=pd.read_csv("diabetes.csv")
df.head()

df.describe()

df.info()

df.isnull().values.any()

#histogram
df.hist(bins=10,figsize=(10,10))
plt.show()

#correlation

sns.heatmap(df.corr())

sns.countplot(y=df['Outcome'],palette='Set1')

#box plot for outlier visualization
sns.set(style="whitegrid")
df.boxplot(figsize=(15,6))

#box plot
sns.set(style="whitegrid")

sns.set(rc={'figure.figsize':(4,2)})
sns.boxplot(x=df['Insulin'])
plt.show()
sns.boxplot(x=df['BloodPressure'])
plt.show()
sns.boxplot(x=df['DiabetesPedigreeFunction'])
plt.show()

#outlier remove

Q1=df.quantile(0.25)
Q3=df.quantile(0.75)
IQR=Q3-Q1

print("---Q1--- \n",Q1)
print("\n---Q3--- \n",Q3)
print("\n---IQR---\n",IQR)
#print((df < (Q1 - 1.5 * IQR))|(df > (Q3 + 1.5 * IQR)))

#outlier remove
df_out = df[~((df < (Q1 - 1.5 * IQR)) |(df > (Q3 + 1.5 * IQR))).any(axis=1)]
df.shape,df_out.shape
#more than 80 records deleted

"""Extract Features and Targets"""

X=df_out.drop(columns=['Outcome'])
y=df_out['Outcome']

"""Splitting train test data 80 20 ratio"""

from sklearn.model_selection import train_test_split
train_X,test_X,train_y,test_y=train_test_split(X,y,test_size=0.2)

train_X.shape,test_X.shape,train_y.shape,test_y.shape

"""Build the model"""

#Logistic Regression
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import roc_auc_score

acc=[]
roc=[]

clf=LogisticRegression(solver='lbfgs', max_iter=1000)
clf.fit(train_X,train_y)
y_pred=clf.predict(test_X)
#find accuracy
ac=accuracy_score(test_y,y_pred)
print(ac)

#pd.DataFrame(data={'Actual':test_y,'Predicted':y_pred}).head()

#Random forest
from sklearn.ensemble import RandomForestClassifier

clf=RandomForestClassifier()
clf.fit(train_X,train_y)

y_pred=clf.predict(test_X)
#find accuracy
ac=accuracy_score(test_y,y_pred)
print(ac)